/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose';

/**
 * Lean version of BilateralContractPolicyPermissionConstraintDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractPolicyPermissionDocument.toObject()`.
 * ```
 * const bilateralcontractpolicypermissionObject = bilateralcontractpolicypermission.toObject();
 * ```
 */
export type BilateralContractPolicyPermissionConstraint = {
  '@type'?: string;
  leftOperand?: string;
  operator?: string;
  rightOperand?: any;
};

/**
 * Lean version of BilateralContractPolicyPermissionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractPolicyDocument.toObject()`.
 * ```
 * const bilateralcontractpolicyObject = bilateralcontractpolicy.toObject();
 * ```
 */
export type BilateralContractPolicyPermission = {
  action?: string;
  target?: string;
  constraint: BilateralContractPolicyPermissionConstraint[];
};

/**
 * Lean version of BilateralContractPolicyProhibitionConstraintDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractPolicyProhibitionDocument.toObject()`.
 * ```
 * const bilateralcontractpolicyprohibitionObject = bilateralcontractpolicyprohibition.toObject();
 * ```
 */
export type BilateralContractPolicyProhibitionConstraint = {
  '@type'?: string;
  leftOperand?: string;
  operator?: string;
  rightOperand?: any;
};

/**
 * Lean version of BilateralContractPolicyProhibitionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractPolicyDocument.toObject()`.
 * ```
 * const bilateralcontractpolicyObject = bilateralcontractpolicy.toObject();
 * ```
 */
export type BilateralContractPolicyProhibition = {
  action?: string;
  target?: string;
  constraint: BilateralContractPolicyProhibitionConstraint[];
};

/**
 * Lean version of BilateralContractPolicyDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractDocument.toObject()`.
 * ```
 * const bilateralcontractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContractPolicy = {
  uid?: string;
  description?: string;
  permission: BilateralContractPolicyPermission[];
  prohibition: BilateralContractPolicyProhibition[];
};

/**
 * Lean version of BilateralContractPurposeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractDocument.toObject()`.
 * ```
 * const bilateralcontractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContractPurpose = {
  uid?: string;
  purpose?: string;
  action?: string;
  assigner?: string;
  assignee?: string;
  piiCategory: string[];
  consentType?: string;
  primaryPurpose?: boolean;
  termination?: string;
  thirdPartyDisclosure?: boolean;
  thirdPartyName?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of BilateralContractSignatureDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractDocument.toObject()`.
 * ```
 * const bilateralcontractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContractSignature = {
  did: string;
  party: string;
  value: string;
  date?: Date;
};

/**
 * Lean version of BilateralContractRevokedSignatureDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractDocument.toObject()`.
 * ```
 * const bilateralcontractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContractRevokedSignature = {
  did: string;
  party: string;
  value: string;
  date?: Date;
};

/**
 * Lean version of BilateralContractNegotiatorDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractDocument.toObject()`.
 * ```
 * const bilateralcontractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContractNegotiator = {
  did?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of BilateralContractDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BilateralContractDocument.toObject()`. To avoid conflicts with model names, use the type alias `BilateralContractObject`.
 * ```
 * const bilateralcontractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContract = {
  uid?: string;
  dataProvider?: string;
  dataConsumer?: string;
  serviceOffering?: string;
  profile?: string;
  policy: BilateralContractPolicy[];
  purpose: BilateralContractPurpose[];
  signatures: BilateralContractRevokedSignature[];
  revokedSignatures: BilateralContractRevokedSignature[];
  negotiators: BilateralContractNegotiator[];
  status?: 'signed' | 'revoked' | 'under_negotiation' | 'pending';
  terminationAndValidity: {
    effectiveDate?: Date;
    terminationPeriod?: Date;
  };
  limitationOfLiability?: Date;
  termsAndConditions?: string;
  jsonLD?: string;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of BilateralContractDocument (type alias of `BilateralContract`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { BilateralContract } from "../models"
 * import { BilateralContractObject } from "../interfaces/mongoose.gen.ts"
 *
 * const bilateralcontractObject: BilateralContractObject = bilateralcontract.toObject();
 * ```
 */
export type BilateralContractObject = BilateralContract;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type BilateralContractQuery = mongoose.Query<
  any,
  BilateralContractDocument,
  BilateralContractQueries
> &
  BilateralContractQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `BilateralContractSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type BilateralContractQueries = {};

export type BilateralContractMethods = {};

export type BilateralContractStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const BilateralContract = mongoose.model<BilateralContractDocument, BilateralContractModel>("BilateralContract", BilateralContractSchema);
 * ```
 */
export type BilateralContractModel = mongoose.Model<
  BilateralContractDocument,
  BilateralContractQueries
> &
  BilateralContractStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new BilateralContract schema instances:
 * ```
 * const BilateralContractSchema: BilateralContractSchema = new mongoose.Schema({ ... })
 * ```
 */
export type BilateralContractSchema = mongoose.Schema<
  BilateralContractDocument,
  BilateralContractModel,
  BilateralContractMethods,
  BilateralContractQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractPolicyPermissionDocument["constraint"]` element.
 */
export type BilateralContractPolicyPermissionConstraintDocument =
  mongoose.Types.Subdocument & {
    '@type'?: string;
    leftOperand?: string;
    operator?: string;
    rightOperand?: any;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractPolicyDocument["permission"]` element.
 */
export type BilateralContractPolicyPermissionDocument =
  mongoose.Types.Subdocument & {
    action?: string;
    target?: string;
    constraint: mongoose.Types.DocumentArray<BilateralContractPolicyPermissionConstraintDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractPolicyProhibitionDocument["constraint"]` element.
 */
export type BilateralContractPolicyProhibitionConstraintDocument =
  mongoose.Types.Subdocument & {
    '@type'?: string;
    leftOperand?: string;
    operator?: string;
    rightOperand?: any;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractPolicyDocument["prohibition"]` element.
 */
export type BilateralContractPolicyProhibitionDocument =
  mongoose.Types.Subdocument & {
    action?: string;
    target?: string;
    constraint: mongoose.Types.DocumentArray<BilateralContractPolicyProhibitionConstraintDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractDocument["policy"]` element.
 */
export type BilateralContractPolicyDocument = mongoose.Types.Subdocument & {
  uid?: string;
  description?: string;
  permission: mongoose.Types.DocumentArray<BilateralContractPolicyPermissionDocument>;
  prohibition: mongoose.Types.DocumentArray<BilateralContractPolicyProhibitionDocument>;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractDocument["purpose"]` element.
 */
export type BilateralContractPurposeDocument = mongoose.Types.Subdocument & {
  uid?: string;
  purpose?: string;
  action?: string;
  assigner?: string;
  assignee?: string;
  piiCategory: mongoose.Types.Array<string>;
  consentType?: string;
  primaryPurpose?: boolean;
  termination?: string;
  thirdPartyDisclosure?: boolean;
  thirdPartyName?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractDocument["signatures"]` element.
 */
export type BilateralContractSignatureDocument = mongoose.Types.Subdocument & {
  did: string;
  party: string;
  value: string;
  date?: Date;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractDocument["revokedSignatures"]` element.
 */
export type BilateralContractRevokedSignatureDocument =
  mongoose.Types.Subdocument & {
    did: string;
    party: string;
    value: string;
    date?: Date;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `BilateralContractDocument["negotiators"]` element.
 */
export type BilateralContractNegotiatorDocument = mongoose.Types.Subdocument & {
  did?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const BilateralContract = mongoose.model<BilateralContractDocument, BilateralContractModel>("BilateralContract", BilateralContractSchema);
 * ```
 */
export type BilateralContractDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  BilateralContractQueries
> &
  BilateralContractMethods & {
    uid?: string;
    dataProvider?: string;
    dataConsumer?: string;
    serviceOffering?: string;
    profile?: string;
    policy: mongoose.Types.DocumentArray<BilateralContractPolicyDocument>;
    purpose: mongoose.Types.DocumentArray<BilateralContractPurposeDocument>;
    signatures: mongoose.Types.DocumentArray<BilateralContractRevokedSignatureDocument>;
    revokedSignatures: mongoose.Types.DocumentArray<BilateralContractRevokedSignatureDocument>;
    negotiators: mongoose.Types.DocumentArray<BilateralContractNegotiatorDocument>;
    status?: 'signed' | 'revoked' | 'under_negotiation' | 'pending';
    terminationAndValidity: {
      effectiveDate?: Date;
      terminationPeriod?: Date;
    };
    limitationOfLiability?: Date;
    termsAndConditions?: string;
    jsonLD?: string;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Lean version of ContractServiceOfferingPoliciePermissionConstraintDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractServiceOfferingPoliciePermissionDocument.toObject()`.
 * ```
 * const contractserviceofferingpoliciepermissionObject = contractserviceofferingpoliciepermission.toObject();
 * ```
 */
export type ContractServiceOfferingPoliciePermissionConstraint = {
  '@type'?: string;
  leftOperand?: string;
  operator?: string;
  rightOperand?: any;
};

/**
 * Lean version of ContractServiceOfferingPoliciePermissionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractServiceOfferingPolicieDocument.toObject()`.
 * ```
 * const contractserviceofferingpolicieObject = contractserviceofferingpolicie.toObject();
 * ```
 */
export type ContractServiceOfferingPoliciePermission = {
  action?: string;
  target?: string;
  constraint: ContractServiceOfferingPoliciePermissionConstraint[];
};

/**
 * Lean version of ContractServiceOfferingPolicieProhibitionConstraintDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractServiceOfferingPolicieProhibitionDocument.toObject()`.
 * ```
 * const contractserviceofferingpolicieprohibitionObject = contractserviceofferingpolicieprohibition.toObject();
 * ```
 */
export type ContractServiceOfferingPolicieProhibitionConstraint = {
  '@type'?: string;
  leftOperand?: string;
  operator?: string;
  rightOperand?: any;
};

/**
 * Lean version of ContractServiceOfferingPolicieProhibitionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractServiceOfferingPolicieDocument.toObject()`.
 * ```
 * const contractserviceofferingpolicieObject = contractserviceofferingpolicie.toObject();
 * ```
 */
export type ContractServiceOfferingPolicieProhibition = {
  action?: string;
  target?: string;
  constraint: ContractServiceOfferingPolicieProhibitionConstraint[];
};

/**
 * Lean version of ContractServiceOfferingPolicieDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractServiceOfferingDocument.toObject()`.
 * ```
 * const contractserviceofferingObject = contractserviceoffering.toObject();
 * ```
 */
export type ContractServiceOfferingPolicie = {
  uid?: string;
  description?: string;
  permission: ContractServiceOfferingPoliciePermission[];
  prohibition: ContractServiceOfferingPolicieProhibition[];
};

/**
 * Lean version of ContractServiceOfferingDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type ContractServiceOffering = {
  participant: string;
  serviceOffering: string;
  policies: ContractServiceOfferingPolicie[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ContractRolesAndObligationPoliciePermissionConstraintDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractRolesAndObligationPoliciePermissionDocument.toObject()`.
 * ```
 * const contractrolesandobligationpoliciepermissionObject = contractrolesandobligationpoliciepermission.toObject();
 * ```
 */
export type ContractRolesAndObligationPoliciePermissionConstraint = {
  '@type'?: string;
  leftOperand?: string;
  operator?: string;
  rightOperand?: any;
};

/**
 * Lean version of ContractRolesAndObligationPoliciePermissionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractRolesAndObligationPolicieDocument.toObject()`.
 * ```
 * const contractrolesandobligationpolicieObject = contractrolesandobligationpolicie.toObject();
 * ```
 */
export type ContractRolesAndObligationPoliciePermission = {
  action?: string;
  target?: string;
  constraint: ContractRolesAndObligationPoliciePermissionConstraint[];
};

/**
 * Lean version of ContractRolesAndObligationPolicieProhibitionConstraintDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractRolesAndObligationPolicieProhibitionDocument.toObject()`.
 * ```
 * const contractrolesandobligationpolicieprohibitionObject = contractrolesandobligationpolicieprohibition.toObject();
 * ```
 */
export type ContractRolesAndObligationPolicieProhibitionConstraint = {
  '@type'?: string;
  leftOperand?: string;
  operator?: string;
  rightOperand?: any;
};

/**
 * Lean version of ContractRolesAndObligationPolicieProhibitionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractRolesAndObligationPolicieDocument.toObject()`.
 * ```
 * const contractrolesandobligationpolicieObject = contractrolesandobligationpolicie.toObject();
 * ```
 */
export type ContractRolesAndObligationPolicieProhibition = {
  action?: string;
  target?: string;
  constraint: ContractRolesAndObligationPolicieProhibitionConstraint[];
};

/**
 * Lean version of ContractRolesAndObligationPolicieDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractRolesAndObligationDocument.toObject()`.
 * ```
 * const contractrolesandobligationObject = contractrolesandobligation.toObject();
 * ```
 */
export type ContractRolesAndObligationPolicie = {
  uid?: string;
  description?: string;
  permission: ContractRolesAndObligationPoliciePermission[];
  prohibition: ContractRolesAndObligationPolicieProhibition[];
};

/**
 * Lean version of ContractRolesAndObligationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type ContractRolesAndObligation = {
  role?: string;
  policies: ContractRolesAndObligationPolicie[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ContractDataProcessingDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type ContractDataProcessing = {
  connectorURI: string;
  services: string[];
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of ContractPurposeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type ContractPurpose = {
  uid?: string;
  purpose?: string;
  action?: string;
  assigner?: string;
  assignee?: string;
  purposeCategory?: string;
  consentType?: string;
  piiCategory?: string;
  primaryPurpose?: string;
  termination?: string;
  thirdPartyDisclosure?: string;
  thirdPartyName?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ContractMemberDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type ContractMember = {
  participant: string;
  role: string;
  signature: string;
  date?: Date;
  serviceOfferings?: any[]; // TMP
};

/**
 * Lean version of ContractRevokedMemberDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type ContractRevokedMember = {
  participant: string;
  role: string;
  signature: string;
  date?: Date;
};

/**
 * Lean version of ContractDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`. To avoid conflicts with model names, use the type alias `ContractObject`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type Contract = {
  uid?: string;
  profile?: string;
  ecosystem?: string;
  orchestrator?: string;
  serviceOfferings: ContractServiceOffering[];
  rolesAndObligations: ContractRolesAndObligation[];
  dataProcessings: ContractDataProcessing[];
  purpose: ContractPurpose[];
  members: ContractRevokedMember[];
  revokedMembers: ContractRevokedMember[];
  status?: 'signed' | 'revoked' | 'pending';
  jsonLD?: string;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of ContractDocument (type alias of `Contract`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Contract } from "../models"
 * import { ContractObject } from "../interfaces/mongoose.gen.ts"
 *
 * const contractObject: ContractObject = contract.toObject();
 * ```
 */
export type ContractObject = Contract;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ContractQuery = mongoose.Query<
  any,
  ContractDocument,
  ContractQueries
> &
  ContractQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ContractSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ContractQueries = {};

export type ContractMethods = {};

export type ContractStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Contract = mongoose.model<ContractDocument, ContractModel>("Contract", ContractSchema);
 * ```
 */
export type ContractModel = mongoose.Model<ContractDocument, ContractQueries> &
  ContractStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Contract schema instances:
 * ```
 * const ContractSchema: ContractSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ContractSchema = mongoose.Schema<
  ContractDocument,
  ContractModel,
  ContractMethods,
  ContractQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractServiceOfferingPoliciePermissionDocument["constraint"]` element.
 */
export type ContractServiceOfferingPoliciePermissionConstraintDocument =
  mongoose.Types.Subdocument & {
    '@type'?: string;
    leftOperand?: string;
    operator?: string;
    rightOperand?: any;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractServiceOfferingPolicieDocument["permission"]` element.
 */
export type ContractServiceOfferingPoliciePermissionDocument =
  mongoose.Types.Subdocument & {
    action?: string;
    target?: string;
    constraint: mongoose.Types.DocumentArray<ContractServiceOfferingPoliciePermissionConstraintDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractServiceOfferingPolicieProhibitionDocument["constraint"]` element.
 */
export type ContractServiceOfferingPolicieProhibitionConstraintDocument =
  mongoose.Types.Subdocument & {
    '@type'?: string;
    leftOperand?: string;
    operator?: string;
    rightOperand?: any;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractServiceOfferingPolicieDocument["prohibition"]` element.
 */
export type ContractServiceOfferingPolicieProhibitionDocument =
  mongoose.Types.Subdocument & {
    action?: string;
    target?: string;
    constraint: mongoose.Types.DocumentArray<ContractServiceOfferingPolicieProhibitionConstraintDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractServiceOfferingDocument["policies"]` element.
 */
export type ContractServiceOfferingPolicieDocument =
  mongoose.Types.Subdocument & {
    uid?: string;
    description?: string;
    permission: mongoose.Types.DocumentArray<ContractServiceOfferingPoliciePermissionDocument>;
    prohibition: mongoose.Types.DocumentArray<ContractServiceOfferingPolicieProhibitionDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractDocument["serviceOfferings"]` element.
 */
export type ContractServiceOfferingDocument = mongoose.Types.Subdocument & {
  participant: string;
  serviceOffering: string;
  policies: mongoose.Types.DocumentArray<ContractServiceOfferingPolicieDocument>;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractRolesAndObligationPoliciePermissionDocument["constraint"]` element.
 */
export type ContractRolesAndObligationPoliciePermissionConstraintDocument =
  mongoose.Types.Subdocument & {
    '@type'?: string;
    leftOperand?: string;
    operator?: string;
    rightOperand?: any;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractRolesAndObligationPolicieDocument["permission"]` element.
 */
export type ContractRolesAndObligationPoliciePermissionDocument =
  mongoose.Types.Subdocument & {
    action?: string;
    target?: string;
    constraint: mongoose.Types.DocumentArray<ContractRolesAndObligationPoliciePermissionConstraintDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractRolesAndObligationPolicieProhibitionDocument["constraint"]` element.
 */
export type ContractRolesAndObligationPolicieProhibitionConstraintDocument =
  mongoose.Types.Subdocument & {
    '@type'?: string;
    leftOperand?: string;
    operator?: string;
    rightOperand?: any;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractRolesAndObligationPolicieDocument["prohibition"]` element.
 */
export type ContractRolesAndObligationPolicieProhibitionDocument =
  mongoose.Types.Subdocument & {
    action?: string;
    target?: string;
    constraint: mongoose.Types.DocumentArray<ContractRolesAndObligationPolicieProhibitionConstraintDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractRolesAndObligationDocument["policies"]` element.
 */
export type ContractRolesAndObligationPolicieDocument =
  mongoose.Types.Subdocument & {
    uid?: string;
    description?: string;
    permission: mongoose.Types.DocumentArray<ContractRolesAndObligationPoliciePermissionDocument>;
    prohibition: mongoose.Types.DocumentArray<ContractRolesAndObligationPolicieProhibitionDocument>;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractDocument["rolesAndObligations"]` element.
 */
export type ContractRolesAndObligationDocument = mongoose.Types.Subdocument & {
  role?: string;
  policies: mongoose.Types.DocumentArray<ContractRolesAndObligationPolicieDocument>;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractDocument["dataProcessings"]` element.
 */
export type ContractDataProcessingDocument = mongoose.Types.Subdocument & {
  connectorURI: string;
  services: mongoose.Types.Array<string>;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractDocument["purpose"]` element.
 */
export type ContractPurposeDocument = mongoose.Types.Subdocument & {
  uid?: string;
  purpose?: string;
  action?: string;
  assigner?: string;
  assignee?: string;
  purposeCategory?: string;
  consentType?: string;
  piiCategory?: string;
  primaryPurpose?: string;
  termination?: string;
  thirdPartyDisclosure?: string;
  thirdPartyName?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractDocument["members"]` element.
 */
export type ContractMemberDocument = mongoose.Types.Subdocument & {
  participant: string;
  role: string;
  signature: string;
  date?: Date;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `ContractDocument["revokedMembers"]` element.
 */
export type ContractRevokedMemberDocument = mongoose.Types.Subdocument & {
  participant: string;
  role: string;
  signature: string;
  date?: Date;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Contract = mongoose.model<ContractDocument, ContractModel>("Contract", ContractSchema);
 * ```
 */
export type ContractDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ContractQueries
> &
  ContractMethods & {
    uid?: string;
    profile?: string;
    ecosystem?: string;
    orchestrator?: string;
    serviceOfferings: mongoose.Types.DocumentArray<ContractServiceOfferingDocument>;
    rolesAndObligations: mongoose.Types.DocumentArray<ContractRolesAndObligationDocument>;
    dataProcessings: mongoose.Types.DocumentArray<ContractDataProcessingDocument>;
    purpose: mongoose.Types.DocumentArray<ContractPurposeDocument>;
    members: mongoose.Types.DocumentArray<ContractRevokedMemberDocument>;
    revokedMembers: mongoose.Types.DocumentArray<ContractRevokedMemberDocument>;
    status?: 'signed' | 'revoked' | 'pending';
    jsonLD?: string;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module 'mongoose' {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
