{
  "swagger": "2.0",
  "info": {
    "title": "Contract Manager API",
    "description": "Available routes through the Contract Manager API",
    "version": "1.0.0"
  },
  "host": "8888",
  "basePath": "/",
  "paths": {
    "/bilaterals/all/": {
      "get": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/for/{did}": {
      "get": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "isParticipant",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hasSigned",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/": {
      "post": {
        "tags": [
          "Bilateral"
        ],
        "summary": "Create a new bilateral contract",
        "description": "",
        "parameters": [
          {
            "name": "contract",
            "in": "body",
            "description": "Contract data for creation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputBilateralContract"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created contract",
            "schema": {
              "$ref": "#/definitions/Bilateral"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bilaterals/{id}": {
      "get": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/negociator/{id}": {
      "put": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "did": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/sign/{id}": {
      "put": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/sign/revoke/{id}/{did}": {
      "delete": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "did",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/check-exploitability/{id}": {
      "post": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/policy/{id}": {
      "put": {
        "tags": [
          "Bilateral"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "policyId": {
                  "example": "any"
                },
                "values": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bilaterals/policies/{id}": {
      "put": {
        "tags": [
          "Bilateral"
        ],
        "summary": "Inject multiple policies into a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "policies",
            "in": "body",
            "description": "Array of policy data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/PolicyBilateralInjection"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies successfully injected",
            "schema": {
              "$ref": "#/definitions/Bilateral"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/all/": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get all contracts with optional filter on the contract status",
        "description": "",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status of the contract.",
            "required": false,
            "type": "string",
            "enum": [
              "signed",
              "revoked",
              "pending"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of contracts",
            "schema": {
              "$ref": "#/definitions/ContractsList"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/for/{did}": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get contracts for a specific DID with an optional filter",
        "description": "",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "DID of the participant"
          },
          {
            "name": "hasSigned",
            "in": "query",
            "description": "Filter contracts based on signature status",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contracts",
            "schema": {
              "$ref": "#/definitions/ContractsList"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Create a new contract",
        "description": "",
        "parameters": [
          {
            "name": "contract",
            "in": "body",
            "description": "Contract data for creation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputContract"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created contract",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/{id}": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get contract by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract details",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Update an existing contract by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract to update"
          },
          {
            "name": "contract",
            "in": "body",
            "description": "Updated contract data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated contract details",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/serviceoffering/{id}": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get the policies for a given service offering",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "participant",
            "in": "query",
            "description": "ID of the participant",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceOffering",
            "in": "query",
            "description": "ID of the service offering",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of policies related to the service offering",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/ContractPolicy"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/sign/{id}": {
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Sign an existing contract by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract to sign"
          },
          {
            "name": "signature",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract successfully signed",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/sign/revoke/{id}/{did}": {
      "delete": {
        "tags": [
          "Contract"
        ],
        "summary": "Revoke the signature of a participant on a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "did",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "DID of the participant"
          }
        ],
        "responses": {
          "200": {
            "description": "Signature revoked successfully",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "404": {
            "description": "Contract or participant not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/role/exploitability/{id}/{role}": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Check data exploitability for a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the related role"
          }
        ],
        "responses": {
          "200": {
            "description": "Exploitability check result",
            "schema": {
              "$ref": "#/definitions/ExploitabilityResult"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/policy/{id}": {
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Inject a policy into a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "policy",
            "in": "body",
            "description": "Policy data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyInjection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy successfully injected",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/policies/{id}": {
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Inject multiple policies into a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "policies",
            "in": "body",
            "description": "Array of policy data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/PolicyInjection"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies successfully injected",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/policies/role/{id}": {
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Inject policies for a role into a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "policies",
            "in": "body",
            "description": "Array of policy data for a given role.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "role": {
                  "type": "string",
                  "example": "string"
                },
                "policies": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/definitions/PolicyRoleInjection"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies for role successfully injected",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/policies/roles/{id}": {
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Inject policies for specified groups of role",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "policies",
            "in": "body",
            "description": "Array of policies associated with a group of roles.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "object"
                    },
                    "properties": {
                      "type": "object",
                      "properties": {
                        "roles": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "array"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "example": "string"
                                }
                              }
                            }
                          }
                        },
                        "policies": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "array"
                            },
                            "items": {
                              "$ref": "#/definitions/PolicyRoleInjection"
                            }
                          }
                        }
                      }
                    },
                    "required": {
                      "type": "array",
                      "example": [
                        "roles",
                        "policies"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies for role successfully injected",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/policies/offering/{id}": {
      "put": {
        "tags": [
          "Contract"
        ],
        "summary": "Inject policies for an offering into a contract",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "policies",
            "in": "body",
            "description": "Array of policy data for a given role.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "participant": {
                  "type": "string",
                  "example": "string"
                },
                "serviceOffering": {
                  "type": "string",
                  "example": "string"
                },
                "policies": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/definitions/PolicyRoleInjection"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies for role successfully injected",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contracts/policies/offering/{contractId}/{offeringId}/{participantId}": {
      "delete": {
        "tags": [
          "Contract"
        ],
        "summary": "Remove policies associated with a specific offering/participant pair from a contract based on their IDs.",
        "description": "",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          },
          {
            "name": "offeringId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the service offering"
          },
          {
            "name": "participantId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the participant"
          }
        ],
        "responses": {
          "200": {
            "description": "Policies for role successfully injected",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad request, invalid data.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/store": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Endpoint to store user data.",
        "description": "Endpoint to store user data.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Data has been added to the store.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Endpoint to log in a user.",
        "description": "Endpoint to log in a user.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object for login.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "schema": {
              "$ref": "#/definitions/LoginResult"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/policies": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Endpoint to add policies to the user context.",
        "description": "Endpoint to add policies to the user context.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policies",
            "in": "body",
            "description": "Array of policies to be added to the user context.",
            "required": true,
            "items": {
              "$ref": "#/definitions/ODRLPolicy"
            },
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New policies injected successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "The following policies are not valid.",
            "schema": {
              "$ref": "#/definitions/InvalidPolicies"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Policy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "string"
        },
        "description": {
          "type": "string",
          "example": "string"
        },
        "requestedFields": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "array"
            },
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        },
        "policy": {
          "type": "string",
          "example": "object"
        }
      }
    },
    "ContractPolicy": {
      "type": "object",
      "properties": {
        "description": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "string"
            }
          }
        },
        "permission": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          }
        },
        "prohibition": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "ODRLPolicy": {
      "type": "object",
      "properties": {}
    },
    "User": {
      "type": "object",
      "properties": {}
    },
    "PolicyList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {}
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "string"
            }
          }
        }
      }
    },
    "VerificationResult": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "boolean"
        }
      }
    },
    "ExploitabilityResult": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "boolean"
        }
      }
    },
    "LoginResult": {
      "type": "object",
      "properties": {
        "token": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "string"
            }
          }
        }
      }
    },
    "SuccessMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "string"
            }
          }
        }
      }
    },
    "InvalidPolicies": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {}
      }
    },
    "ContractsList": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "array"
        },
        "items": {
          "$ref": "#/definitions/Contract"
        }
      }
    },
    "Asset": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "object"
        },
        "properties": {
          "type": "object",
          "properties": {
            "target": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "action": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "condition": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "required": {
              "type": "array",
              "example": [
                "target",
                "action"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "InputBilateralContract": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "object"
        },
        "properties": {
          "type": "object",
          "properties": {
            "contract": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "serviceOffering": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "dataProvider": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "dataConsumer": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "example": [
                    "serviceOffering",
                    "dataProvider",
                    "dataConsumer"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": {
          "type": "array",
          "example": [
            "contract"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InputContract": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "object"
        },
        "properties": {
          "type": "object",
          "properties": {
            "contract": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "ecosystem": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "permission": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "array"
                        },
                        "items": {
                          "$ref": "#/definitions/Asset"
                        }
                      }
                    },
                    "prohibition": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "array"
                        },
                        "items": {
                          "$ref": "#/definitions/Asset"
                        }
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "example": [
                    "ecosystem"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": {
          "type": "array",
          "example": [
            "contract"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Bilateral": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "object"
        },
        "properties": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "dataProvider": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "dataConsumer": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "serviceOffering": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "profile": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "policy": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "purpose": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "signatures": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "revokedSignatures": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "negotiators": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "object"
                    },
                    "properties": {
                      "type": "object",
                      "properties": {
                        "did": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "status": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                },
                "enum": {
                  "type": "array",
                  "example": [
                    "signed",
                    "revoked",
                    "under_negotiation",
                    "pending"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "default": {
                  "type": "string",
                  "example": "pending"
                }
              }
            },
            "terminationAndValidity": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "effectiveDate": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "format": {
                          "type": "string",
                          "example": "date-time"
                        }
                      }
                    },
                    "terminationPeriod": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "format": {
                          "type": "string",
                          "example": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            },
            "limitationOfLiability": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                },
                "format": {
                  "type": "string",
                  "example": "date-time"
                }
              }
            },
            "termsAndConditions": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "jsonLD": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        },
        "required": {
          "type": "array",
          "example": [
            "dataProvider",
            "dataConsumer"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Contract": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "object"
        },
        "properties": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "ecosystem": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "orchestrator": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            },
            "rolesAndObligations": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "members": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "revokedMembers": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                }
              }
            },
            "status": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                },
                "enum": {
                  "type": "array",
                  "example": [
                    "signed",
                    "revoked",
                    "pending"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "default": {
                  "type": "string",
                  "example": "pending"
                }
              }
            },
            "jsonLD": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        },
        "required": {
          "type": "array",
          "example": [
            "ecosystem"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODRLContract": {
      "type": "object",
      "properties": {}
    },
    "PolicyBilateralInjection": {
      "type": "object",
      "properties": {
        "ruleId": {
          "type": "string",
          "example": "string"
        },
        "values": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "object"
            }
          }
        }
      }
    },
    "PolicyInjection": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "example": "string"
        },
        "ruleId": {
          "type": "string",
          "example": "string"
        },
        "values": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "object"
            }
          }
        }
      }
    },
    "PolicyRoleInjection": {
      "type": "object",
      "properties": {
        "ruleId": {
          "type": "string",
          "example": "string"
        },
        "values": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "object"
            }
          }
        }
      }
    },
    "Signature": {
      "type": "object",
      "properties": {
        "participant": {
          "type": "string",
          "example": "string"
        },
        "role": {
          "type": "string",
          "example": "string"
        },
        "signature": {
          "type": "string",
          "example": "string"
        }
      }
    }
  }
}
